from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
import logging
from keyboards.inline import language_kb, format_kb, main_menu_kb, back_kb, main_menu_button_kb
from utils.notifications import notify_admin
from utils.context import context

router = Router()
logger = logging.getLogger('app')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π –ª–æ–≥–≥–µ—Ä


class ProgrammingStates(StatesGroup):
    waiting_language = State()
    waiting_format = State()
    waiting_contact = State()


@router.callback_query(F.data == "programming_help")
async def programming_help_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–ö–∞–∫–æ–π —è–∑—ã–∫ —Ö–æ—Ç–∏—Ç–µ –∏–∑—É—á–∞—Ç—å?",
        reply_markup=language_kb()
    )
    await state.set_state(ProgrammingStates.waiting_language)
    await callback.answer()


@router.callback_query(ProgrammingStates.waiting_language, F.data.startswith("lang_"))
async def language_selected(callback: CallbackQuery, state: FSMContext):
    language = "C++" if callback.data == "lang_cpp" else "Python"

    await state.update_data(
        category="programming",
        language=language,
        username=callback.from_user.username,
        user_id=callback.from_user.id,
        timestamp=datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    )

    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∑–∞–Ω—è—Ç–∏–π:",
        reply_markup=format_kb()
    )

    await state.set_state(ProgrammingStates.waiting_format)
    await callback.answer()


@router.callback_query(ProgrammingStates.waiting_format, F.data.startswith("format_"))
async def format_selected(callback: CallbackQuery, state: FSMContext):
    format_type = "–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ" if callback.data == "format_individual" else "–≤ –≥—Ä—É–ø–ø–µ"

    await state.update_data(format=format_type)

    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ @–Ω–∏–∫ –≤ Telegram –¥–ª—è —Å–≤—è–∑–∏.",
        reply_markup=back_kb("programming_help")
    )

    await state.set_state(ProgrammingStates.waiting_contact)
    await callback.answer()


@router.message(ProgrammingStates.waiting_contact)
async def process_programming_contact(message: Message, state: FSMContext):
    contact_info = message.text
    user_data = await state.get_data()

    # –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ —á—Ç–æ –∏ aiogram
    logger.info(f"üìã –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ:\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user_data.get('username')} (ID: {user_data.get('user_id')})\n"
                f"üíª –Ø–∑—ã–∫: {user_data.get('language')}\n"
                f"üìö –§–æ—Ä–º–∞—Ç: {user_data.get('format')}\n"
                f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact_info}\n"
                f"{'=' * 50}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —á–µ—Ä–µ–∑ context
    await notify_admin(context.bot, user_data, contact_info)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –° –ö–ù–û–ü–ö–û–ô
    await message.answer(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.\n\n"
        "üéÅ –ü–æ–∫–∞ –∂–¥—ë—Ç–µ, –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –±–æ–Ω—É—Å: [—Å—Å—ã–ª–∫–∞ –Ω–∞ PDF]",
        reply_markup=main_menu_button_kb()
    )

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ context
    await context.auto_message_scheduler.schedule_auto_messages(message.from_user.id)

    await state.clear()