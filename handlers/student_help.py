from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
import logging
from keyboards.inline import student_help_kb, main_menu_kb, back_kb, main_menu_button_kb
from utils.notifications import notify_admin
from utils.context import context

router = Router()
logger = logging.getLogger('app')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π –ª–æ–≥–≥–µ—Ä


class StudentStates(StatesGroup):
    waiting_contact = State()


@router.callback_query(F.data == "student_help")
async def student_help_start(callback: CallbackQuery):
    await callback.message.answer(
        "–ö–∞–∫–∏–µ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω—ã?",
        reply_markup=student_help_kb()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("work_"))
async def student_work_selected(callback: CallbackQuery, state: FSMContext):
    work_types = {
        "work_labs": "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ",
        "work_coursework": "–ö—É—Ä—Å–æ–≤—ã–µ",
        "work_diploma": "–î–∏–ø–ª–æ–º–Ω—ã–µ",
        "work_other": "–î—Ä—É–≥–æ–µ"
    }

    work_type = work_types.get(callback.data, "–î—Ä—É–≥–æ–µ")

    await state.update_data(
        category="student_help",
        work_type=work_type,
        username=callback.from_user.username,
        user_id=callback.from_user.id,
        timestamp=datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    )

    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ @–Ω–∏–∫ –≤ Telegram –¥–ª—è —Å–≤—è–∑–∏.",
        reply_markup=back_kb("student_help")
    )

    await state.set_state(StudentStates.waiting_contact)
    await callback.answer()


@router.message(StudentStates.waiting_contact)
async def process_student_contact(message: Message, state: FSMContext):
    contact_info = message.text
    user_data = await state.get_data()

    # –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ —á—Ç–æ –∏ aiogram
    logger.info(f"üìã –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞:\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user_data.get('username')} (ID: {user_data.get('user_id')})\n"
                f"üìù –¢–∏–ø —Ä–∞–±–æ—Ç—ã: {user_data.get('work_type')}\n"
                f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact_info}\n"
                f"{'=' * 50}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —á–µ—Ä–µ–∑ context
    await notify_admin(context.bot, user_data, contact_info)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –° –ö–ù–û–ü–ö–û–ô
    await message.answer(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.",
        reply_markup=main_menu_button_kb()
    )

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ context
    await context.auto_message_scheduler.schedule_auto_messages(message.from_user.id)

    await state.clear()