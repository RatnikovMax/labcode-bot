# vk_bot.py
import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.utils import get_random_id
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
import logging
import json
from datetime import datetime

from config import VK_GROUP_TOKEN, VK_GROUP_ID, VK_ADMIN_ID
from utils.auto_messages import AutoMessageScheduler
from utils.notifications import notify_admin_vk

logger = logging.getLogger(__name__)


class VKBot:
    def __init__(self):
        try:
            logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ VK —Å–µ—Å—Å–∏–∏...")
            self.vk_session = vk_api.VkApi(token=VK_GROUP_TOKEN)
            logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LongPoll...")
            self.longpoll = VkBotLongPoll(self.vk_session, int(VK_GROUP_ID))
            logger.info("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ VK API...")
            self.vk = self.vk_session.get_api()
            self.user_states = {}
            self.user_data = {}
            self.auto_message_scheduler = AutoMessageScheduler()
            logger.info("‚úÖ VK –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VK –±–æ—Ç–∞: {e}", exc_info=True)
            raise

    def get_keyboard(self, keyboard_type="main_menu"):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è VK"""
        keyboard = VkKeyboard(one_time=True)

        if keyboard_type == "main_menu":
            keyboard.add_button("üéì –ü–æ–º–æ—â—å —Å—Ç—É–¥–µ–Ω—Ç–∞–º", color=VkKeyboardColor.PRIMARY)
            keyboard.add_line()
            keyboard.add_button("üíª –û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é", color=VkKeyboardColor.SECONDARY)

        elif keyboard_type == "student_help":
            keyboard.add_button("üìù –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ", color=VkKeyboardColor.PRIMARY)
            keyboard.add_button("üìä –ö—É—Ä—Å–æ–≤—ã–µ", color=VkKeyboardColor.PRIMARY)
            keyboard.add_line()
            keyboard.add_button("üéì –î–∏–ø–ª–æ–º–Ω—ã–µ", color=VkKeyboardColor.PRIMARY)
            keyboard.add_button("‚ùî –î—Ä—É–≥–æ–µ", color=VkKeyboardColor.SECONDARY)
            keyboard.add_line()
            keyboard.add_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", color=VkKeyboardColor.NEGATIVE)

        elif keyboard_type == "programming":
            keyboard.add_button("C++", color=VkKeyboardColor.PRIMARY)
            keyboard.add_button("Python", color=VkKeyboardColor.PRIMARY)
            keyboard.add_line()
            keyboard.add_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", color=VkKeyboardColor.NEGATIVE)

        elif keyboard_type == "format":
            keyboard.add_button("üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ", color=VkKeyboardColor.PRIMARY)
            keyboard.add_button("üë• –í –≥—Ä—É–ø–ø–µ", color=VkKeyboardColor.PRIMARY)
            keyboard.add_line()
            keyboard.add_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", color=VkKeyboardColor.NEGATIVE)

        elif keyboard_type == "back_only":
            keyboard.add_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", color=VkKeyboardColor.NEGATIVE)

        return keyboard.get_keyboard()

    def send_message(self, user_id, message, keyboard=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            params = {
                'user_id': user_id,
                'message': message,
                'random_id': get_random_id(),
            }
            if keyboard:
                params['keyboard'] = keyboard

            self.vk.messages.send(**params)
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    def handle_start(self, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç"""
        welcome_message = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Lab&Code!\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
            "‚Ä¢ üéì –° —É—á–µ–±–Ω—ã–º–∏ —Ä–∞–±–æ—Ç–∞–º–∏ (–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ, –∫—É—Ä—Å–æ–≤—ã–µ, –¥–∏–ø–ª–æ–º–Ω—ã–µ)\n"
            "‚Ä¢ üíª –û—Å–≤–æ–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (C++, Python)\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
        )

        self.user_states[user_id] = "main_menu"
        self.send_message(user_id, welcome_message, self.get_keyboard("main_menu"))

    def handle_student_help(self, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–º–æ—â–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º"""
        message = (
            "üéì –ü–æ–º–æ—â—å —Å—Ç—É–¥–µ–Ω—Ç–∞–º\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã:\n"
            "‚Ä¢ üìù –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã\n"
            "‚Ä¢ üìä –ö—É—Ä—Å–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã\n"
            "‚Ä¢ üéì –î–∏–ø–ª–æ–º–Ω—ã–µ —Ä–∞–±–æ—Ç—ã\n"
            "‚Ä¢ ‚ùî –î—Ä—É–≥–∏–µ —É—á–µ–±–Ω—ã–µ —Ä–∞–±–æ—Ç—ã"
        )

        self.user_states[user_id] = "student_help"
        self.user_data[user_id] = {"category": "student_help"}
        self.send_message(user_id, message, self.get_keyboard("student_help"))

    def handle_programming_help(self, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ –æ–±—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é"""
        message = (
            "üíª –û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
            "‚Ä¢ C++ - –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ Python - –¥–ª—è –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
        )

        self.user_states[user_id] = "programming_language"
        self.user_data[user_id] = {"category": "programming"}
        self.send_message(user_id, message, self.get_keyboard("programming"))

    def handle_work_type(self, user_id, work_type):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç—ã"""
        work_types = {
            "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ": "üìù –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
            "–∫—É—Ä—Å–æ–≤—ã–µ": "üìä –ö—É—Ä—Å–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã",
            "–¥–∏–ø–ª–æ–º–Ω—ã–µ": "üéì –î–∏–ø–ª–æ–º–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
            "–¥—Ä—É–≥–æ–µ": "‚ùî –î—Ä—É–≥–∏–µ —É—á–µ–±–Ω—ã–µ —Ä–∞–±–æ—Ç—ã"
        }

        message = (
            f"{work_types[work_type]}\n\n"
            "üìû –î–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏, "
            "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µgram, email –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞):"
        )

        self.user_states[user_id] = "waiting_contact"
        self.user_data[user_id]["work_type"] = work_type
        self.send_message(user_id, message, self.get_keyboard("back_only"))

    def handle_language_choice(self, user_id, language):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"""
        languages = {
            "c++": "C++",
            "python": "Python"
        }

        message = (
            f"üíª {languages[language]}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ–±—É—á–µ–Ω–∏—è:\n"
            "‚Ä¢ üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è\n"
            "‚Ä¢ üë• –í –≥—Ä—É–ø–ø–µ - –∑–∞–Ω—è—Ç–∏—è –≤ –º–∏–Ω–∏-–≥—Ä—É–ø–ø–∞—Ö"
        )

        self.user_states[user_id] = "programming_format"
        self.user_data[user_id]["language"] = language
        self.send_message(user_id, message, self.get_keyboard("format"))

    def handle_format_choice(self, user_id, format_type):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ–±—É—á–µ–Ω–∏—è"""
        message = (
            f"üë§ {format_type.capitalize()}\n\n"
            "üìû –î–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–Ω—è—Ç–∏–π, "
            "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç (telegram, email –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞):"
        )

        self.user_states[user_id] = "waiting_contact"
        self.user_data[user_id]["format"] = format_type
        self.send_message(user_id, message, self.get_keyboard("back_only"))

    def handle_back(self, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥"""
        current_state = self.user_states.get(user_id, "main_menu")

        if current_state == "student_help":
            self.handle_start(user_id)
        elif current_state == "programming_language":
            self.handle_start(user_id)
        elif current_state == "programming_format":
            self.handle_programming_help(user_id)
        elif current_state == "waiting_contact":
            if self.user_data.get(user_id, {}).get("category") == "student_help":
                self.handle_student_help(user_id)
            else:
                self.handle_programming_help(user_id)
        else:
            self.handle_start(user_id)

    def handle_contact_info(self, user_id, contact_info):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        user_data = self.user_data.get(user_id, {})

        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
        notification = f"üìû –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VK ID: {user_id}\n"

        if user_data.get("category") == "student_help":
            work_type = user_data.get("work_type", "–Ω–µ —É–∫–∞–∑–∞–Ω")
            notification += f"üéì –¢–∏–ø —Ä–∞–±–æ—Ç—ã: {work_type}\n"
        else:
            language = user_data.get("language", "–Ω–µ —É–∫–∞–∑–∞–Ω")
            format_type = user_data.get("format", "–Ω–µ —É–∫–∞–∑–∞–Ω")
            notification += f"üíª –Ø–∑—ã–∫: {language}\n"
            notification += f"üë§ –§–æ—Ä–º–∞—Ç: {format_type}\n"

        notification += f"üì± –ö–æ–Ω—Ç–∞–∫—Ç: {contact_info}\n"
        notification += f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –í–´–ó–û–í
        try:
            from utils.notifications import notify_admin_vk
            notify_admin_vk(user_data, contact_info, user_id)
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ –æ—Ç {user_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

        # –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        thank_message = (
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.\n\n"
            "üìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Å—Ä–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞–ø—Ä—è–º—É—é."
        )

        self.user_states[user_id] = "main_menu"
        self.send_message(user_id, thank_message, self.get_keyboard("main_menu"))

    def run(self):
        """–ó–∞–ø—É—Å–∫ VK –±–æ—Ç–∞"""
        logger.info("üöÄ VK –±–æ—Ç –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            group_info = self.vk.groups.getById(group_id=int(VK_GROUP_ID))
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥—Ä—É–ø–ø–µ: {group_info[0]['name']}")

            for event in self.longpoll.listen():
                if event.type == VkBotEventType.MESSAGE_NEW and not event.object.message.get('from_id') < 0:
                    user_id = event.object.message['from_id']
                    text = event.object.message['text'].lower().strip()

                    logger.info(f"üì® VK —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text}")

                    current_state = self.user_states.get(user_id, "main_menu")

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
                    if text in ['/start', 'start', '–Ω–∞—á–∞—Ç—å', '—Å—Ç–∞—Ä—Ç', '–ø—Ä–∏–≤–µ—Ç']:
                        self.handle_start(user_id)

                    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    elif current_state == "main_menu":
                        if "–ø–æ–º–æ—â—å —Å—Ç—É–¥–µ–Ω—Ç–∞–º" in text or "üéì" in text:
                            self.handle_student_help(user_id)
                        elif "–æ–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é" in text or "üíª" in text:
                            self.handle_programming_help(user_id)
                        else:
                            self.handle_start(user_id)

                    # –ü–æ–º–æ—â—å —Å—Ç—É–¥–µ–Ω—Ç–∞–º
                    elif current_state == "student_help":
                        if "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ" in text or "üìù" in text:
                            self.handle_work_type(user_id, "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ")
                        elif "–∫—É—Ä—Å–æ–≤—ã–µ" in text or "üìä" in text:
                            self.handle_work_type(user_id, "–∫—É—Ä—Å–æ–≤—ã–µ")
                        elif "–¥–∏–ø–ª–æ–º–Ω—ã–µ" in text or "üéì" in text:
                            self.handle_work_type(user_id, "–¥–∏–ø–ª–æ–º–Ω—ã–µ")
                        elif "–¥—Ä—É–≥–æ–µ" in text or "‚ùî" in text:
                            self.handle_work_type(user_id, "–¥—Ä—É–≥–æ–µ")
                        elif "–Ω–∞–∑–∞–¥" in text or "‚¨ÖÔ∏è" in text:
                            self.handle_back(user_id)
                        else:
                            self.handle_student_help(user_id)

                    # –í—ã–±–æ—Ä —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
                    elif current_state == "programming_language":
                        if "c++" in text:
                            self.handle_language_choice(user_id, "c++")
                        elif "python" in text:
                            self.handle_language_choice(user_id, "python")
                        elif "–Ω–∞–∑–∞–¥" in text or "‚¨ÖÔ∏è" in text:
                            self.handle_back(user_id)
                        else:
                            self.handle_programming_help(user_id)

                    # –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –æ–±—É—á–µ–Ω–∏—è
                    elif current_state == "programming_format":
                        if "–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ" in text or "üë§" in text:
                            self.handle_format_choice(user_id, "–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ")
                        elif "–≤ –≥—Ä—É–ø–ø–µ" in text or "üë•" in text:
                            self.handle_format_choice(user_id, "–≤ –≥—Ä—É–ø–ø–µ")
                        elif "–Ω–∞–∑–∞–¥" in text or "‚¨ÖÔ∏è" in text:
                            self.handle_programming_help(user_id)
                        else:
                            self.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∑–∞–Ω—è—Ç–∏–π:", self.get_keyboard("format"))

                    # –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
                    elif current_state == "waiting_contact":
                        self.handle_contact_info(user_id, text)

                    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    elif "–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" in text or "üè†" in text:
                        self.handle_start(user_id)

                    # –õ—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    else:
                        self.handle_start(user_id)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ VK –±–æ—Ç–µ: {e}", exc_info=True)