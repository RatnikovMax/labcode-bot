# vk_bot.py
import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.utils import get_random_id
import logging
import json
import asyncio
from datetime import datetime

from config import VK_GROUP_TOKEN, VK_GROUP_ID, VK_ADMIN_ID
from utils.auto_messages import AutoMessageScheduler
from utils.notifications import notify_admin_vk

logger = logging.getLogger(__name__)


class VKBot:
    def __init__(self):
        try:
            self.vk_session = vk_api.VkApi(token=VK_GROUP_TOKEN)
            self.longpoll = VkBotLongPoll(self.vk_session, VK_GROUP_ID)
            self.vk = self.vk_session.get_api()
            self.user_states = {}
            self.user_data = {}
            self.auto_message_scheduler = AutoMessageScheduler()
            logger.info("‚úÖ VK –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VK –±–æ—Ç–∞: {e}")
            raise

    def get_keyboard(self, buttons, one_time=False):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è VK"""
        keyboard = {
            "one_time": one_time,
            "buttons": buttons
        }
        return json.dumps(keyboard, ensure_ascii=False)

    def get_main_keyboard(self):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è VK"""
        buttons = [
            [{
                "action": {
                    "type": "text",
                    "label": "üéì –ü–æ–º–æ—â—å —Å—Ç—É–¥–µ–Ω—Ç–∞–º"
                },
                "color": "primary"
            }],
            [{
                "action": {
                    "type": "text",
                    "label": "üíª –û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é"
                },
                "color": "primary"
            }]
        ]
        return self.get_keyboard(buttons, one_time=True)

    def get_student_keyboard(self):
        """–ú–µ–Ω—é –ø–æ–º–æ—â–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º –¥–ª—è VK"""
        buttons = [
            [{
                "action": {
                    "type": "text",
                    "label": "üìù –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ"
                },
                "color": "secondary"
            }],
            [{
                "action": {
                    "type": "text",
                    "label": "üìä –ö—É—Ä—Å–æ–≤—ã–µ"
                },
                "color": "secondary"
            }],
            [{
                "action": {
                    "type": "text",
                    "label": "üéì –î–∏–ø–ª–æ–º–Ω—ã–µ"
                },
                "color": "secondary"
            }],
            [{
                "action": {
                    "type": "text",
                    "label": "‚ùî –î—Ä—É–≥–æ–µ"
                },
                "color": "secondary"
            }],
            [{
                "action": {
                    "type": "text",
                    "label": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
                },
                "color": "negative"
            }]
        ]
        return self.get_keyboard(buttons, one_time=True)

    def get_language_keyboard(self):
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –¥–ª—è VK"""
        buttons = [
            [{
                "action": {
                    "type": "text",
                    "label": "C++"
                },
                "color": "positive"
            },
                {
                    "action": {
                        "type": "text",
                        "label": "Python"
                    },
                    "color": "positive"
                }],
            [{
                "action": {
                    "type": "text",
                    "label": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
                },
                "color": "negative"
            }]
        ]
        return self.get_keyboard(buttons, one_time=True)

    def get_format_keyboard(self):
        """–ú–µ–Ω—é —Ñ–æ—Ä–º–∞—Ç–∞ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è VK"""
        buttons = [
            [{
                "action": {
                    "type": "text",
                    "label": "üë§ –û–Ω–ª–∞–π–Ω –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ"
                },
                "color": "positive"
            }],
            [{
                "action": {
                    "type": "text",
                    "label": "üë• –û–Ω–ª–∞–π–Ω –≤ –≥—Ä—É–ø–ø–µ"
                },
                "color": "positive"
            }],
            [{
                "action": {
                    "type": "text",
                    "label": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
                },
                "color": "negative"
            }]
        ]
        return self.get_keyboard(buttons, one_time=True)

    def get_main_menu_button(self):
        """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        buttons = [
            [{
                "action": {
                    "type": "text",
                    "label": "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
                },
                "color": "primary"
            }]
        ]
        return self.get_keyboard(buttons, one_time=True)

    def send_message(self, user_id, message, keyboard=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ VK"""
        try:
            self.vk.messages.send(
                user_id=user_id,
                message=message,
                random_id=get_random_id(),
                keyboard=keyboard
            )
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é VK {user_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ VK: {e}")

    def handle_start(self, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç"""
        welcome_text = """
üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ Lab&Code.

–ú—ã –ø–æ–º–æ–≥–∞–µ–º:
üìö –°—Ç—É–¥–µ–Ω—Ç–∞–º ‚Äî —Å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–º–∏, –∫—É—Ä—Å–æ–≤—ã–º–∏, –¥–∏–ø–ª–æ–º–∞–º–∏
üíª –í—Å–µ–º, –∫—Ç–æ —Ö–æ—á–µ—Ç –æ—Å–≤–æ–∏—Ç—å C++ –∏–ª–∏ Python

–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?
        """
        self.send_message(user_id, welcome_text, self.get_main_keyboard())
        self.user_states[user_id] = "main_menu"

    def handle_student_help(self, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–º–æ—â–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º"""
        self.send_message(user_id, "–ö–∞–∫–∏–µ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω—ã?", self.get_student_keyboard())
        self.user_states[user_id] = "student_help"

    def handle_programming_help(self, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é"""
        self.send_message(user_id, "–ö–∞–∫–æ–π —è–∑—ã–∫ —Ö–æ—Ç–∏—Ç–µ –∏–∑—É—á–∞—Ç—å?", self.get_language_keyboard())
        self.user_states[user_id] = "programming_language"

    def handle_work_type(self, user_id, work_type):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç—ã"""
        work_types = {
            "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ": "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ",
            "–∫—É—Ä—Å–æ–≤—ã–µ": "–ö—É—Ä—Å–æ–≤—ã–µ",
            "–¥–∏–ø–ª–æ–º–Ω—ã–µ": "–î–∏–ø–ª–æ–º–Ω—ã–µ",
            "–¥—Ä—É–≥–æ–µ": "–î—Ä—É–≥–æ–µ"
        }

        self.user_data[user_id] = {
            "category": "student_help",
            "work_type": work_types.get(work_type, "–î—Ä—É–≥–æ–µ"),
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "user_id": user_id
        }

        self.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –í–ö –¥–ª—è —Å–≤—è–∑–∏.")
        self.user_states[user_id] = "waiting_contact"

    def handle_language_choice(self, user_id, language):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"""
        language_name = "C++" if language.lower() == "c++" else "Python"

        self.user_data[user_id] = {
            "category": "programming",
            "language": language_name,
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "user_id": user_id
        }

        self.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∑–∞–Ω—è—Ç–∏–π:", self.get_format_keyboard())
        self.user_states[user_id] = "programming_format"

    def handle_format_choice(self, user_id, format_type):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ–±—É—á–µ–Ω–∏—è"""
        format_name = "–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ" if "–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ" in format_type.lower() else "–≤ –≥—Ä—É–ø–ø–µ"

        if user_id in self.user_data:
            self.user_data[user_id]["format"] = format_name

        self.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –í–ö –¥–ª—è —Å–≤—è–∑–∏.")
        self.user_states[user_id] = "waiting_contact"

    def handle_contact_info(self, user_id, contact_info):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        if user_id in self.user_data:
            user_data = self.user_data[user_id]
            user_data["contact"] = contact_info

            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            if user_data.get('category') == 'student_help':
                logger.info(f"üìã VK: –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞:\n"
                            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: VK ID: {user_id}\n"
                            f"üìù –¢–∏–ø —Ä–∞–±–æ—Ç—ã: {user_data.get('work_type')}\n"
                            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact_info}\n"
                            f"{'=' * 50}")
            else:
                logger.info(f"üìã VK: –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ:\n"
                            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: VK ID: {user_id}\n"
                            f"üíª –Ø–∑—ã–∫: {user_data.get('language')}\n"
                            f"üìö –§–æ—Ä–º–∞—Ç: {user_data.get('format')}\n"
                            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact_info}\n"
                            f"{'=' * 50}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            notify_admin_vk(user_data, contact_info, user_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            if user_data.get('category') == 'student_help':
                self.send_message(user_id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.",
                                  self.get_main_menu_button())
            else:
                self.send_message(user_id,
                                  "‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.\n\nüéÅ –ü–æ–∫–∞ –∂–¥—ë—Ç–µ, –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –±–æ–Ω—É—Å: [—Å—Å—ã–ª–∫–∞ –Ω–∞ PDF]",
                                  self.get_main_menu_button())

            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è
            asyncio.create_task(self.auto_message_scheduler.schedule_vk_messages(user_id, self))

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.user_states.pop(user_id, None)
            self.user_data.pop(user_id, None)

    def handle_back(self, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥"""
        self.handle_start(user_id)

    def run(self):
        """–ó–∞–ø—É—Å–∫ VK –±–æ—Ç–∞"""
        logger.info("üöÄ VK –±–æ—Ç –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")

        try:
            for event in self.longpoll.listen():
                if event.type == VkBotEventType.MESSAGE_NEW and not event.object.message.get('from_id') < 0:
                    user_id = event.object.message['from_id']
                    text = event.object.message['text'].lower().strip()

                    logger.info(f"üì® VK —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text}")

                    current_state = self.user_states.get(user_id, "main_menu")

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
                    if text in ['/start', 'start', '–Ω–∞—á–∞—Ç—å', '—Å—Ç–∞—Ä—Ç', '–ø—Ä–∏–≤–µ—Ç']:
                        self.handle_start(user_id)

                    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    elif current_state == "main_menu":
                        if "–ø–æ–º–æ—â—å —Å—Ç—É–¥–µ–Ω—Ç–∞–º" in text or "üéì" in text:
                            self.handle_student_help(user_id)
                        elif "–æ–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é" in text or "üíª" in text:
                            self.handle_programming_help(user_id)
                        else:
                            self.handle_start(user_id)

                    # –ü–æ–º–æ—â—å —Å—Ç—É–¥–µ–Ω—Ç–∞–º
                    elif current_state == "student_help":
                        if "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ" in text or "üìù" in text:
                            self.handle_work_type(user_id, "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ")
                        elif "–∫—É—Ä—Å–æ–≤—ã–µ" in text or "üìä" in text:
                            self.handle_work_type(user_id, "–∫—É—Ä—Å–æ–≤—ã–µ")
                        elif "–¥–∏–ø–ª–æ–º–Ω—ã–µ" in text or "üéì" in text:
                            self.handle_work_type(user_id, "–¥–∏–ø–ª–æ–º–Ω—ã–µ")
                        elif "–¥—Ä—É–≥–æ–µ" in text or "‚ùî" in text:
                            self.handle_work_type(user_id, "–¥—Ä—É–≥–æ–µ")
                        elif "–Ω–∞–∑–∞–¥" in text or "‚¨ÖÔ∏è" in text:
                            self.handle_back(user_id)
                        else:
                            self.handle_student_help(user_id)

                    # –í—ã–±–æ—Ä —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
                    elif current_state == "programming_language":
                        if "c++" in text:
                            self.handle_language_choice(user_id, "c++")
                        elif "python" in text:
                            self.handle_language_choice(user_id, "python")
                        elif "–Ω–∞–∑–∞–¥" in text or "‚¨ÖÔ∏è" in text:
                            self.handle_back(user_id)
                        else:
                            self.handle_programming_help(user_id)

                    # –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –æ–±—É—á–µ–Ω–∏—è
                    elif current_state == "programming_format":
                        if "–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ" in text or "üë§" in text:
                            self.handle_format_choice(user_id, "–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ")
                        elif "–≤ –≥—Ä—É–ø–ø–µ" in text or "üë•" in text:
                            self.handle_format_choice(user_id, "–≤ –≥—Ä—É–ø–ø–µ")
                        elif "–Ω–∞–∑–∞–¥" in text or "‚¨ÖÔ∏è" in text:
                            self.handle_programming_help(user_id)
                        else:
                            self.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∑–∞–Ω—è—Ç–∏–π:", self.get_format_keyboard())

                    # –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
                    elif current_state == "waiting_contact":
                        self.handle_contact_info(user_id, text)

                    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    elif "–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" in text or "üè†" in text:
                        self.handle_start(user_id)

                    # –õ—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    else:
                        self.handle_start(user_id)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ VK –±–æ—Ç–µ: {e}")