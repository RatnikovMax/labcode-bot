# vk_bot.py
import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.utils import get_random_id
import logging
import json
import asyncio
from datetime import datetime

from config import VK_GROUP_TOKEN, VK_GROUP_ID, VK_ADMIN_ID
from utils.auto_messages import AutoMessageScheduler
from utils.notifications import notify_admin_vk

logger = logging.getLogger(__name__)


class VKBot:
    def __init__(self):
        try:
            logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ VK —Å–µ—Å—Å–∏–∏...")
            self.vk_session = vk_api.VkApi(token=VK_GROUP_TOKEN)
            logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LongPoll...")
            self.longpoll = VkBotLongPoll(self.vk_session, int(VK_GROUP_ID))
            logger.info("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ VK API...")
            self.vk = self.vk_session.get_api()
            self.user_states = {}
            self.user_data = {}
            self.auto_message_scheduler = AutoMessageScheduler()
            logger.info("‚úÖ VK –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VK –±–æ—Ç–∞: {e}", exc_info=True)
            raise

    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (get_keyboard, handle_start –∏ —Ç.–¥.)

    def run(self):
        """–ó–∞–ø—É—Å–∫ VK –±–æ—Ç–∞"""
        logger.info("üöÄ VK –±–æ—Ç –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            group_info = self.vk.groups.getById(group_id=int(VK_GROUP_ID))
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥—Ä—É–ø–ø–µ: {group_info[0]['name']}")

            for event in self.longpoll.listen():
                if event.type == VkBotEventType.MESSAGE_NEW and not event.object.message.get('from_id') < 0:
                    user_id = event.object.message['from_id']
                    text = event.object.message['text'].lower().strip()

                    logger.info(f"üì® VK —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text}")

                    current_state = self.user_states.get(user_id, "main_menu")

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
                    if text in ['/start', 'start', '–Ω–∞—á–∞—Ç—å', '—Å—Ç–∞—Ä—Ç', '–ø—Ä–∏–≤–µ—Ç']:
                        self.handle_start(user_id)

                    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    elif current_state == "main_menu":
                        if "–ø–æ–º–æ—â—å —Å—Ç—É–¥–µ–Ω—Ç–∞–º" in text or "üéì" in text:
                            self.handle_student_help(user_id)
                        elif "–æ–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é" in text or "üíª" in text:
                            self.handle_programming_help(user_id)
                        else:
                            self.handle_start(user_id)

                    # –ü–æ–º–æ—â—å —Å—Ç—É–¥–µ–Ω—Ç–∞–º
                    elif current_state == "student_help":
                        if "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ" in text or "üìù" in text:
                            self.handle_work_type(user_id, "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ")
                        elif "–∫—É—Ä—Å–æ–≤—ã–µ" in text or "üìä" in text:
                            self.handle_work_type(user_id, "–∫—É—Ä—Å–æ–≤—ã–µ")
                        elif "–¥–∏–ø–ª–æ–º–Ω—ã–µ" in text or "üéì" in text:
                            self.handle_work_type(user_id, "–¥–∏–ø–ª–æ–º–Ω—ã–µ")
                        elif "–¥—Ä—É–≥–æ–µ" in text or "‚ùî" in text:
                            self.handle_work_type(user_id, "–¥—Ä—É–≥–æ–µ")
                        elif "–Ω–∞–∑–∞–¥" in text or "‚¨ÖÔ∏è" in text:
                            self.handle_back(user_id)
                        else:
                            self.handle_student_help(user_id)

                    # –í—ã–±–æ—Ä —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
                    elif current_state == "programming_language":
                        if "c++" in text:
                            self.handle_language_choice(user_id, "c++")
                        elif "python" in text:
                            self.handle_language_choice(user_id, "python")
                        elif "–Ω–∞–∑–∞–¥" in text or "‚¨ÖÔ∏è" in text:
                            self.handle_back(user_id)
                        else:
                            self.handle_programming_help(user_id)

                    # –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –æ–±—É—á–µ–Ω–∏—è
                    elif current_state == "programming_format":
                        if "–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ" in text or "üë§" in text:
                            self.handle_format_choice(user_id, "–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ")
                        elif "–≤ –≥—Ä—É–ø–ø–µ" in text or "üë•" in text:
                            self.handle_format_choice(user_id, "–≤ –≥—Ä—É–ø–ø–µ")
                        elif "–Ω–∞–∑–∞–¥" in text or "‚¨ÖÔ∏è" in text:
                            self.handle_programming_help(user_id)
                        else:
                            self.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∑–∞–Ω—è—Ç–∏–π:", self.get_format_keyboard())

                    # –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
                    elif current_state == "waiting_contact":
                        self.handle_contact_info(user_id, text)

                    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    elif "–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" in text or "üè†" in text:
                        self.handle_start(user_id)

                    # –õ—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    else:
                        self.handle_start(user_id)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ VK –±–æ—Ç–µ: {e}", exc_info=True)