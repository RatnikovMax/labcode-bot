# vk_bot.py
import asyncio
import logging
import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.utils import get_random_id
import json
from datetime import datetime

from config import VK_GROUP_TOKEN, VK_GROUP_ID, VK_ADMIN_ID
from utils.auto_messages import AutoMessageScheduler
from utils.notifications import notify_admin_vk
from utils.context import context

logger = logging.getLogger(__name__)


class VKBot:
    def __init__(self):
        self.vk_session = vk_api.VkApi(token=VK_GROUP_TOKEN)
        self.longpoll = VkBotLongPoll(self.vk_session, VK_GROUP_ID)
        self.vk = self.vk_session.get_api()
        self.user_states = {}
        self.user_data = {}

    def get_keyboard(self, buttons, inline=False):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è VK"""
        keyboard = {
            "one_time": not inline,
            "buttons": buttons
        }
        return json.dumps(keyboard, ensure_ascii=False)

    def get_main_keyboard(self):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è VK"""
        buttons = [
            [
                {
                    "action": {
                        "type": "text",
                        "payload": '{"button": "1"}',
                        "label": "üéì –ü–æ–º–æ—â—å —Å—Ç—É–¥–µ–Ω—Ç–∞–º"
                    },
                    "color": "primary"
                }
            ],
            [
                {
                    "action": {
                        "type": "text",
                        "payload": '{"button": "2"}',
                        "label": "üíª –û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é"
                    },
                    "color": "primary"
                }
            ]
        ]
        return self.get_keyboard(buttons)

    def get_student_keyboard(self):
        """–ú–µ–Ω—é –ø–æ–º–æ—â–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º –¥–ª—è VK"""
        buttons = [
            [
                {
                    "action": {
                        "type": "text",
                        "payload": '{"button": "labs"}',
                        "label": "üìù –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ"
                    },
                    "color": "secondary"
                }
            ],
            [
                {
                    "action": {
                        "type": "text",
                        "payload": '{"button": "coursework"}',
                        "label": "üìä –ö—É—Ä—Å–æ–≤—ã–µ"
                    },
                    "color": "secondary"
                }
            ],
            [
                {
                    "action": {
                        "type": "text",
                        "payload": '{"button": "diploma"}',
                        "label": "üéì –î–∏–ø–ª–æ–º–Ω—ã–µ"
                    },
                    "color": "secondary"
                }
            ],
            [
                {
                    "action": {
                        "type": "text",
                        "payload": '{"button": "other"}',
                        "label": "‚ùî –î—Ä—É–≥–æ–µ"
                    },
                    "color": "secondary"
                }
            ]
        ]
        return self.get_keyboard(buttons)

    def get_language_keyboard(self):
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –¥–ª—è VK"""
        buttons = [
            [
                {
                    "action": {
                        "type": "text",
                        "payload": '{"button": "cpp"}',
                        "label": "C++"
                    },
                    "color": "positive"
                },
                {
                    "action": {
                        "type": "text",
                        "payload": '{"button": "python"}',
                        "label": "Python"
                    },
                    "color": "positive"
                }
            ]
        ]
        return self.get_keyboard(buttons)

    def get_format_keyboard(self):
        """–ú–µ–Ω—é —Ñ–æ—Ä–º–∞—Ç–∞ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è VK"""
        buttons = [
            [
                {
                    "action": {
                        "type": "text",
                        "payload": '{"button": "individual"}',
                        "label": "üë§ –û–Ω–ª–∞–π–Ω –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ"
                    },
                    "color": "positive"
                }
            ],
            [
                {
                    "action": {
                        "type": "text",
                        "payload": '{"button": "group"}',
                        "label": "üë• –û–Ω–ª–∞–π–Ω –≤ –≥—Ä—É–ø–ø–µ"
                    },
                    "color": "positive"
                }
            ]
        ]
        return self.get_keyboard(buttons)

    def send_message(self, user_id, message, keyboard=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ VK"""
        try:
            self.vk.messages.send(
                user_id=user_id,
                message=message,
                random_id=get_random_id(),
                keyboard=keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ VK: {e}")

    def handle_start(self, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç"""
        welcome_text = """
üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ Lab&Code.

–ú—ã –ø–æ–º–æ–≥–∞–µ–º:
üìö –°—Ç—É–¥–µ–Ω—Ç–∞–º ‚Äî —Å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–º–∏, –∫—É—Ä—Å–æ–≤—ã–º–∏, –¥–∏–ø–ª–æ–º–∞–º–∏
üíª –í—Å–µ–º, –∫—Ç–æ —Ö–æ—á–µ—Ç –æ—Å–≤–æ–∏—Ç—å C++ –∏–ª–∏ Python

–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?
        """
        self.send_message(user_id, welcome_text, self.get_main_keyboard())
        self.user_states[user_id] = "main_menu"

    def handle_student_help(self, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–º–æ—â–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º"""
        self.send_message(user_id, "–ö–∞–∫–∏–µ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω—ã?", self.get_student_keyboard())
        self.user_states[user_id] = "student_help"

    def handle_programming_help(self, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é"""
        self.send_message(user_id, "–ö–∞–∫–æ–π —è–∑—ã–∫ —Ö–æ—Ç–∏—Ç–µ –∏–∑—É—á–∞—Ç—å?", self.get_language_keyboard())
        self.user_states[user_id] = "programming_language"

    def handle_work_type(self, user_id, work_type):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç—ã"""
        work_types = {
            "labs": "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ",
            "coursework": "–ö—É—Ä—Å–æ–≤—ã–µ",
            "diploma": "–î–∏–ø–ª–æ–º–Ω—ã–µ",
            "other": "–î—Ä—É–≥–æ–µ"
        }

        self.user_data[user_id] = {
            "category": "student_help",
            "work_type": work_types.get(work_type, "–î—Ä—É–≥–æ–µ"),
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }

        self.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –í–ö –¥–ª—è —Å–≤—è–∑–∏.")
        self.user_states[user_id] = "waiting_contact"

    def handle_language_choice(self, user_id, language):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"""
        language_name = "C++" if language == "cpp" else "Python"

        if user_id not in self.user_data:
            self.user_data[user_id] = {}

        self.user_data[user_id].update({
            "category": "programming",
            "language": language_name,
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        })

        self.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∑–∞–Ω—è—Ç–∏–π:", self.get_format_keyboard())
        self.user_states[user_id] = "programming_format"

    def handle_format_choice(self, user_id, format_type):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ–±—É—á–µ–Ω–∏—è"""
        format_name = "–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ" if format_type == "individual" else "–≤ –≥—Ä—É–ø–ø–µ"

        if user_id in self.user_data:
            self.user_data[user_id]["format"] = format_name

        self.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –í–ö –¥–ª—è —Å–≤—è–∑–∏.")
        self.user_states[user_id] = "waiting_contact"

    def handle_contact_info(self, user_id, contact_info):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        if user_id in self.user_data:
            user_data = self.user_data[user_id]

            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            if user_data.get('category') == 'student_help':
                logger.info(f"üìã VK: –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ - {user_data.get('work_type')}, –ö–æ–Ω—Ç–∞–∫—Ç: {contact_info}")
            else:
                logger.info(
                    f"üìã VK: –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ - {user_data.get('language')}, –§–æ—Ä–º–∞—Ç: {user_data.get('format')}, –ö–æ–Ω—Ç–∞–∫—Ç: {contact_info}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            notify_admin_vk(user_data, contact_info, user_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            if user_data.get('category') == 'student_help':
                self.send_message(user_id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.")
            else:
                self.send_message(user_id,
                                  "‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.\n\nüéÅ –ü–æ–∫–∞ –∂–¥—ë—Ç–µ, –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –±–æ–Ω—É—Å: [—Å—Å—ã–ª–∫–∞ –Ω–∞ PDF]")

            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è
            asyncio.create_task(context.auto_message_scheduler.schedule_vk_messages(user_id, self))

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.user_states.pop(user_id, None)
            self.user_data.pop(user_id, None)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            self.send_message(user_id, "–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?", self.get_main_keyboard())

    async def run(self):
        """–ó–∞–ø—É—Å–∫ VK –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ VK –±–æ—Ç–∞ Lab&Code...")

        for event in self.longpoll.listen():
            if event.type == VkBotEventType.MESSAGE_NEW:
                user_id = event.object.message['from_id']
                text = event.object.message['text']

                logger.info(f"VK —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text}")

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
                if text.lower() in ['/start', '–Ω–∞—á–∞—Ç—å', '—Å—Ç–∞—Ä—Ç']:
                    self.handle_start(user_id)

                # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                elif self.user_states.get(user_id) == "main_menu":
                    if "–ø–æ–º–æ—â—å —Å—Ç—É–¥–µ–Ω—Ç–∞–º" in text.lower() or "1" in text:
                        self.handle_student_help(user_id)
                    elif "–æ–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é" in text.lower() or "2" in text:
                        self.handle_programming_help(user_id)

                # –ü–æ–º–æ—â—å —Å—Ç—É–¥–µ–Ω—Ç–∞–º
                elif self.user_states.get(user_id) == "student_help":
                    if "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ" in text.lower() or "labs" in text:
                        self.handle_work_type(user_id, "labs")
                    elif "–∫—É—Ä—Å–æ–≤—ã–µ" in text.lower() or "coursework" in text:
                        self.handle_work_type(user_id, "coursework")
                    elif "–¥–∏–ø–ª–æ–º–Ω—ã–µ" in text.lower() or "diploma" in text:
                        self.handle_work_type(user_id, "diploma")
                    elif "–¥—Ä—É–≥–æ–µ" in text.lower() or "other" in text:
                        self.handle_work_type(user_id, "other")

                # –í—ã–±–æ—Ä —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
                elif self.user_states.get(user_id) == "programming_language":
                    if "c++" in text.lower() or "cpp" in text:
                        self.handle_language_choice(user_id, "cpp")
                    elif "python" in text.lower():
                        self.handle_language_choice(user_id, "python")

                # –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –æ–±—É—á–µ–Ω–∏—è
                elif self.user_states.get(user_id) == "programming_format":
                    if "–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ" in text.lower() or "individual" in text:
                        self.handle_format_choice(user_id, "individual")
                    elif "–≤ –≥—Ä—É–ø–ø–µ" in text.lower() or "group" in text:
                        self.handle_format_choice(user_id, "group")

                # –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
                elif self.user_states.get(user_id) == "waiting_contact":
                    self.handle_contact_info(user_id, text)

                # –õ—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                else:
                    self.handle_start(user_id)