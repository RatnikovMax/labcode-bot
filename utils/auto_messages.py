# utils/auto_messages.py
import asyncio
import logging
from typing import Dict, List

# –õ–æ–≥–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ
auto_message_logger = logging.getLogger('app')


class AutoMessageScheduler:
    def __init__(self, bot=None):
        self.bot = bot
        self.scheduled_tasks: Dict[int, List[asyncio.Task]] = {}
        auto_message_logger.info("AutoMessageScheduler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def set_bot(self, bot):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        self.bot = bot
        auto_message_logger.info("–ë–æ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ AutoMessageScheduler")

    async def schedule_auto_messages(self, user_id: int):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–π"""
        if self.bot is None:
            auto_message_logger.error("–ë–æ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ AutoMessageScheduler")
            return

        messages = [
            (10, "üî• –ü–æ–ª–µ–∑–Ω–æ –∑–Ω–∞—Ç—å: 5 —Ç–∏–ø–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –∫–æ–¥–∞."),
            (20, "üì¢ –û—Ç–∑—ã–≤: 'Lab&Code –ø–æ–º–æ–≥ –º–Ω–µ –∑–∞—â–∏—Ç–∏—Ç—å –¥–∏–ø–ª–æ–º –ø–æ Python!'"),
            (30, "‚è≥ –û—Å—Ç–∞–ª–æ—Å—å 3 –º–µ—Å—Ç–∞ –Ω–∞ —Å–µ–Ω—Ç—è–±—Ä—å—Å–∫–∏–π –∫—É—Ä—Å Python. –£—Å–ø–µ–π –∑–∞–ø–∏—Å–∞—Ç—å—Å—è!")
        ]

        for delay, text in messages:
            task = asyncio.create_task(
                self.send_auto_message(user_id, text, delay)
            )
            if user_id not in self.scheduled_tasks:
                self.scheduled_tasks[user_id] = []
            self.scheduled_tasks[user_id].append(task)

        auto_message_logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {len(messages)} –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    async def send_auto_message(self, user_id: int, message: str, delay: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            await asyncio.sleep(delay)
            await self.bot.send_message(user_id, message)
            auto_message_logger.info(f"–ê–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            auto_message_logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    def cancel_user_tasks(self, user_id: int):
        """–û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.scheduled_tasks:
            for task in self.scheduled_tasks[user_id]:
                task.cancel()
            del self.scheduled_tasks[user_id]
            auto_message_logger.info(f"–ó–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")