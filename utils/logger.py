# utils/logger.py
import logging
import os
from logging.handlers import TimedRotatingFileHandler
import glob
import time


class CustomFormatter(logging.Formatter):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤"""

    def format(self, record):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        original_message = record.getMessage()

        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞—à–µ –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ –∏–∑ aiogram), —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –µ–≥–æ
        if (not original_message.startswith('Update id=') and
                not original_message.startswith('Start polling') and
                not original_message.startswith('Run polling') and
                'aiogram' not in record.name):
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ —Å—Ç–∏–ª–µ aiogram
            record.msg = f"{original_message}"

        return super().format(record)


def setup_logger():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é"""

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    log_dir = "logs"
    if not os.path.exists(log_dir):
        os.makedirs(log_dir)

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
    formatter = CustomFormatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )

    # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)

    # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º
    file_handler = TimedRotatingFileHandler(
        filename=os.path.join(log_dir, 'bot.log'),
        when='W0',  # –†–æ—Ç–∞—Ü–∏—è –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        interval=1,  # –ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é
        backupCount=4,  # –•—Ä–∞–Ω–∏—Ç—å 4 —Ñ–∞–π–ª–∞ (1 –º–µ—Å—è—Ü)
        encoding='utf-8'
    )
    file_handler.setFormatter(formatter)
    file_handler.setLevel(logging.INFO)

    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    console_handler.setLevel(logging.INFO)

    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
    logger.handlers.clear()
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app_logger = logging.getLogger('app')
    app_logger.setLevel(logging.INFO)
    app_logger.propagate = True  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä

    logging.info("‚úÖ –õ–æ–≥–≥–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å —Ä–æ—Ç–∞—Ü–∏–µ–π —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é")

    return logger


def cleanup_old_logs(log_dir="logs", days=30):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥-—Ñ–∞–π–ª–æ–≤ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)"""
    try:
        current_time = time.time()

        for log_file in glob.glob(os.path.join(log_dir, "*.log*")):
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ days –¥–Ω–µ–π
            if os.path.getctime(log_file) < current_time - (days * 86400):
                os.remove(log_file)
                logging.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –ª–æ–≥-—Ñ–∞–π–ª: {log_file}")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤: {e}")